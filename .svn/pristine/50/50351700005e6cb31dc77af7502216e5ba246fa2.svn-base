//
//  Validator.m
//  Virtual Mall
//
//  Created by Mohini Sindhu  on 14/03/17.
//  Copyright Â© 2017 mindfire. All rights reserved.
//

#import "Validator.h"
#import "NSString+StringOperations.h"

#define kEmailRegex  @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}"
#define kContactRegex @"[1-9][0-9]{9}"
#define kNameRegex @"[a-zA-Z]+"
#define kNameMinLength @2
#define kNameMaxLength @20
#define kEmailMinLenth @5
#define kEmailMaxLength @40
#define kContactLength @10
#define kPasswordMinLenth @8
#define kPasswordMaxLength @20
#define kSelfMatchedStringConstant @"SELF MATCHES %@"


@implementation Validator

/* method checks if particular field is Valid or not
 param : string : field to be validated
			min : min length of field
		    max : max length of field
			regex:regular expression for the format it should follow
 return : Dictionary 
		Key 1: Validation-Key : YES or NO
		Key 2:Result-Key      :if(Validation Key==NO) reason for invalidation else nil;
 */

+(NSDictionary *) validateString:(NSString *)data withMinLength:(NSNumber *)min withMaxLength:(NSNumber *)max withRegex:(NSString *)regex
{
	
	if([[NSString trim:data] isEqualToString:kEmptyFieldNotation])
		return @{kValidKey:kValidKeyNoValue,kReasonKey:kErrorFieldEmpty};
	else if (data.length < min.integerValue)
		return @{kValidKey:kValidKeyNoValue,kReasonKey:[NSString append:kErrorMinLengthRequired withSring:min.stringValue]};
	else if(data.length > max.integerValue)
		return @{kValidKey:kValidKeyNoValue,kReasonKey:[NSString append:kErrorMaxLengthRequired withSring:max.stringValue]};
	else if (regex !=nil)
	{
		NSPredicate *test = [NSPredicate predicateWithFormat:kSelfMatchedStringConstant,regex];
		if (![test evaluateWithObject:data])
			return @{kValidKey:kValidKeyNoValue,kReasonKey:kErrorImproperFormat};
	}
	return @{kValidKey :kValidKeyYesValue};
}


+(NSDictionary *) validateName :(NSString *)name
{
	return [Validator validateString:name withMinLength:kNameMinLength withMaxLength:kNameMaxLength withRegex:kNameRegex];
}


+(NSDictionary *) validateEmail :(NSString *)email
{
	return [Validator validateString:email withMinLength:kEmailMinLenth withMaxLength:kEmailMaxLength withRegex:kEmailRegex];
}

+(NSDictionary *) validateContact :(NSString *)contactNumber
{
	return [Validator validateString:contactNumber withMinLength:kContactLength withMaxLength:kContactLength withRegex:kContactRegex];
}


+(NSDictionary *) validatePassword :(NSString *)password withConfirmPassword :(NSString *)confrimPassword
{
	// calls validation of password Field only if password and confirm password Field matches
	if(![password isEqualToString:confrimPassword])
		return @{kValidKey:kValidKeyNoValue,kReasonKey:kErrorPasswordConfimPasswordMismatch};
	return [Validator validateString:password withMinLength:kPasswordMinLenth withMaxLength:kPasswordMaxLength withRegex:nil];
}
@end
